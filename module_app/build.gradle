apply plugin: 'com.android.application'
// add pmd
apply plugin: 'pmd'
//apply plugin: 'jacoco'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def buildTime() {
    return new Date().format("yyyyMMdd");
}

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "com.guiying.module"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        //打包时间
        resValue "string", "build_time", buildTime()
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        debug {
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
    }

    lintOptions {
        abortOnError false
//        warningsAsErrors true
//        abortOnError true
//        htmlReport true
//        //locations**for**the rules and output
//        lintConfig file("${rootDir}/config/lint/lint-config.xml")
//        htmlOutput file("${buildDir}/reports/lint/lint.html")
    }

}

ext {
    p3c = "1.3.0"
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.support.multidex
    implementation project(':lib_common')

    if (!isModule.toBoolean()) {
        implementation project(':module_main')
        implementation project(':module_girls')
        implementation project(':module_news')
        implementation project(':module_card_girl')
    }

    pmd "com.alibaba.p3c:p3c-pmd:${p3c}"
}

//mypmd {
//    consoleOutput = true
//    reportsDir = file("build/reports/pmd")
//
//    ruleSets = [
//            "java-ali-comment"
//    ]
//}

// =============================
// =========== 打包
// =============================

def buildTime = new Date().format("yyyy-MM-dd_HH-mm-ss", TimeZone.getTimeZone("GMT+8"))

project.ext {
    projectName = PROJECT_NAME
    apkRootDir = "output"
    apkName = PROJECT_NAME + "_"+ buildTime+".apk"
}


build {
    doLast {
        //当前目录下 ，不加 /
        def outputFile = new File("module_app/build/outputs/apk/release/module_app-release.apk")
        def fileP2 = project.ext.apkRootDir + "/" + apkName;
        copyToPath(outputFile, fileP2)
    }
}

def copyToPath(file, path) {
    if (file.name.endsWith('.apk')) {
        def length = 1024;
        println "start: " + file.name
        println "path: " + file.getAbsolutePath()
        if (!file.exists()) {
            return
        }

        println "dest: " + path
        println "test: " + file.name

        def fin = new FileInputStream(file);
        def desFile = new File(path);
        def dir = desFile.getParentFile();
        if (!dir.exists()) {
            dir.mkdirs()
        }
        def fout = new FileOutputStream(desFile);
        byte[] buffer = new byte[length];
        def ins;
        while (true) {
            ins = fin.read(buffer);
            if (ins == -1) {
                fin.close();
                fout.flush();
                fout.close();
                break;
            } else {
                fout.write(buffer, 0, ins);
            }
        }
    }
}

// =============================
// =========== pmd 分析
// =============================

task pmd(type: Pmd) {
    ignoreFailures = true
    source = fileTree('src/main/java')
//    ruleSetFiles = files("${project.rootDir}/config/pmd/PmdRuleSets.xml")
    ruleSets = [
            'java-ali-comment',
            'java-ali-concurrent',
            'java-ali-constant',
            'java-ali-exception',
            'java-ali-flowcontrol',
            'java-ali-naming',
            'java-ali-oop',
            'java-ali-orm',
            'java-ali-other',
            'java-ali-set',
            'java-android','java-basic','java-braces',
            'java-clone','java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception','java-strings',
            'java-sunsecure','java-typeresolution',
            'java-unnecessary','java-unusedcode'

    ]
//    ruleSets = ["java-android"]
    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination "${project.buildDir}/reports/pmd/pmd.xml"
        }
        html {
            destination "${project.buildDir}/reports/pmd/pmd.html"
        }
    }
}

//def configDir = "${project.rootDir}/config"
//def reportDir = "${project.buildDir}/reports"
//check.dependsOn 'pmd' // 将pmd 和 check任务关联起来，调用原来的check 就好调用我们的 pmd
//task pmd(type:Pmd, dependsOn:"assembleDebug") {
//    group = "pmd"
//    ignoreFailures = false
//    consoleOutput = true
////    ruleSetFiles = files("$configDir/pmd/ali-pmd.xml")
//    ruleSets = [
//            'java-android','java-basic','java-braces',
//            'java-clone','java-codesize',
//            'java-comments',
//            'java-controversial',
//            'java-coupling',
//            'java-design',
//            'java-empty',
//            'java-finalizers',
//            'java-imports',
//            'java-j2ee',
//            'java-javabeans',
//            'java-junit',
//            'java-logging-jakarta-commons',
//            'java-logging-java',
//            'java-migrating',
//            'java-naming',
//            'java-optimizations',
//            'java-strictexception','java-strings',
//            'java-sunsecure','java-typeresolution',
//            'java-unnecessary','java-unusedcode'
//
//    ]
////    source 'src/main/java'
//    source = fileTree('src')
//    include '**/*.java'
//    exclude '**/gen/**'
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        xml {
//            destination "$reportsDir/pmd/pmd.xml"
//        }
//        html {
//            destination "$reportsDir/pmd/pmd.html"
//        }
//    }
//}

// =============================
// =========== Jacoco 代码覆盖率 分析
// =============================


//jacoco {
//    toolVersion = "0.7.5.201505241946"
//}
//task coverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        html.destination "${buildDir}/reports/codecoverage"
//    }
//    def ignoredFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            'android/**/*.*',
//            'com.android/**/*.*',
//            'com.google/**/*.*'
//    ]
//    def debugTree = fileTree(dir:"${project.buildDir}/intermediates/classes/debug", excludes: ignoredFilter)
//    sourceDirectories = files(android.sourceSets.main.java.srcDirs)
//    classDirectories = files([debugTree])
//    additionalSourceDirs = files([
//            "${buildDir}/generated/source/buildConfig/debug",
//            "${buildDir}/generated/source/r/debug"
//    ])
//    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
//}